#compdef xmms2

_xmms2_command() {
    local xmms2_cmds

    xmms2_cmds=(
        add:"add the matching media or files to a playlist"
        addpls:"add a playlist file"
        scap:"stop, clear playlist, add arguments and start playing"
        list:"lists the playlist"
        search:"Search and print all media matching the pattern"
        remove:"remove the matching media from a playlist"
        clear:"clears the playlist"
        podcastclear:"remove podcast entries from the media list"

        play:"starts playback"
        pause:"pause playback"
        stop:"stops playback"
        toggle:"toggles playback status between play/pause"

        seek:"seek to a specific place in current song"
        next:"play next song"
        prev:"play previous song"
        jump:"take a leap in the playlist"

        move:"move a entry in the playlist"
        collection:"collection manipulation - type 'xmms2 help collection' for more extensive help"
        playlist:"playlist manipulation - type 'xmms2 help playlist' for more
extensive help"
        server:"server manipulation - type 'xmms2 help server' for more extensive help"

        status:"display playback status, either continuously or once"
        info:"display all the properties for all media matching the pattern"
        help:"print help about a command"
    )

    if (( CURRENT == 1 )); then
        _describe -t command "xmms2 commands" xmms2_cmds
    else
        local curcontext="$curcontext"
    fi

    local cmd=$words[1]

    local curcontext="${curcontext%:*}:xmms2-${cmd}"
    _call_function ret _xmms2_$cmd
}

_xmms2_jump() {
    songlist=(${"$(xmms2 list)"})
    playlistitems=()
    for song ($songlist); do
        if [[ $song = (#b)'  '\[(<->)/(<->)\]' '(*)' '\((*)\) ]]; then
                        playlistitems+=("$match[1][$match[3]]")
        fi
    done

    _values -s ' ' 'playlist items' ${(On)playlistitems}

}

_xmms2_playlist() {
    local playlist_cmds
    playlist_cmds=(
        list:"list all playlists"
        switch:"change the active playlist"
        create:"create a new playlist"
        rename:"rename a playlist"
        remove:"remove the given playlist"
        clear:"clear a playlist, by default, clear the active playlist"
        shuffle:"shuffle a playlist, by default, shuffle the active playlist"
        sort:"sort a playlist, by default, sort the active playlist."
        config:"configure a playlist, by default, sort the active playlist."
    )
    if (( CURRENT == 2 )); then
        _describe -t command "xmms2 playlist commands" playlist_cmds
    else
        local curcontext="$curcontext"
    fi

    local cmd=$words[2]

    local curcontext="${curcontext%:*}:xmms2-${cmd}"
    _call_function ret _xmms2_playlist_$cmd
}

_xmms2_playlist_helper() {
    local list
    oifs="$IFS"
    IFS="

    list=($(xmms2 playlist list|sed 's/^..//'))
    IFS="$oifs"
    _describe -t command "xmms2 playlists" list
}

_xmms2_playlist_switch() {
    _xmms2_playlist_helper
}

_xmms2_playlist_sort() {
    _xmms2_playlist_helper
}

_xmms2_playlist_shuffle() {
    _xmms2_playlist_helper
}

_xmms2_playlist_clear() {
    _xmms2_playlist_helper
}

_xmms2_playlist_remove() {
    _xmms2_playlist_helper
}

#FIXME: TODO rename, other sort args, config

_xmms2_collection() {
    local collection_cmds
    collection_cmds=(
        list:"list all collection" 
        show:"display a human-readable description of a collection"
        create:"create a new collection"
        rename:"rename a collection"
        remove:"remove a collection"
        config:"get or set attributes for the given collection"
    )
    if (( CURRENT == 2 )); then
        _describe -t command "xmms2 collection commands" collection_cmds
    else
        local curcontext="$curcontext"
    fi

    local cmd=$words[2]

    local curcontext="${curcontext%:*}:xmms2-${cmd}"
    _call_function ret _xmms2_collection_$cmd
}

_xmms2_collection_helper() {
    local list
    oifs="$IFS"
    IFS="

    list=($(xmms2 collection list|sed 's/^..//'))
    IFS="$oifs"
    _describe -t command "xmms2 playlists" list
}

_xmms2_collection_rename() {
    _xmms2_collection_helper
}

_xmms2_collection_config() {
    _xmms2_collection_helper
}
_xmms2_collection_remove() {
    _xmms2_collection_helper
}

_xmms2_collection_show() {
    _xmms2_collection_helper
}

_xmms2_add() {
    _files
}

_xmms2_addpls() {
    _files
}

_xmms2_scap() {
    _files
}

_xmms2() {
    _arguments \
        '--format[specify the format of song display]:format string' \
        '--no-status[prevent printing song status on completion]' \
        '*::xmms2 command:_xmms2_command'
}

_xmms2 "$@"
